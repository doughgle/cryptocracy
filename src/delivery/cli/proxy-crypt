#!/usr/bin/env python
"""
Usage: proxy-crypt setup
       proxy-crypt add user <email_address> <user_public_key> <attribute_expression> [options]
       proxy-crypt list (user|file) [options]
       proxy-crypt revoke user <email_address> [options]
       proxy-crypt encrypt <file> <policy_expression> [options]
       proxy-crypt decrypt <file> [options]
       proxy-crypt upload <source_url> [<dest_key>] --email-address=ADDRESS [options]
       proxy-crypt download <url> --email-address=ADDRESS [options]

Options:
  --proxy-crypt-config=FILE      Path to the config file to use for CLI commands. [default: $HOME/.proxy-crypt]
  --email-address=ADDRESS        Identity of the caller for upload download commands.
  -v, --verbose                  Show debug information.
  -h --help                      Show this screen.
  --version                      Show version.

"""
from src.boundaries.object_store import AwsObjectStore
from src.model.cipher import CharmABE
from src.use_cases.download_file import DownloadFileUseCase, DownloadFileRequest
from src.use_cases.encrypt_file import EncryptFileUseCase, EncryptFileRequest
from src.use_cases.list_users import ListUsersUseCase, ListUsersRequest
from src.use_cases.setup import SetupUseCase, SetupRequest
from src.use_cases.upload_file import UploadFileUseCase, UploadFileRequest

__version__ = 'Proxy Crypt 1.0'

from docopt import docopt

from src.boundaries.proxy_key_store import AwsProxyKeyStore
from src.use_cases.add_user import AddUserUseCase, AddUserRequest
from src.use_cases.revoke_user import RevokeUserUseCase, RevokeUserRequest


def init_use_cases():
    global setup, add_user, revoke_user, list_users, download_file, encrypt_file, upload_file
    table_name = 'proxy-key-table-default'
    proxy_key_store = AwsProxyKeyStore(table_name)
    abe_cipher = CharmABE()
    setup = SetupUseCase(abe_cipher)
    add_user = AddUserUseCase(abe_cipher, proxy_key_store)
    revoke_user = RevokeUserUseCase(proxy_key_store)
    list_users = ListUsersUseCase(proxy_key_store)

    object_store = AwsObjectStore('proxy-crypt-bucket-default')
    object_cache = AwsObjectStore('object-cache-bucket-default')
    upload_file = UploadFileUseCase(object_store)
    download_file = DownloadFileUseCase(proxy_key_store, None, object_store, object_cache, cipher=abe_cipher)

    cipher = abe_cipher
    encrypt_file = EncryptFileUseCase(cipher)


if __name__ == '__main__':
    try:
        init_use_cases()

        arguments = docopt(__doc__, version=__version__)
        if arguments['--verbose']:
            print(arguments)
        user_id = arguments['<email_address>']
        response = "Coming soon..!"
        if arguments['setup']:
            response = setup.run(SetupRequest())
        if arguments['user']:
            if arguments['add']:
                response = add_user.run(AddUserRequest(user_id=user_id,
                                                       user_public_key=arguments['<user_public_key>'],
                                                       attributes=arguments['<attribute_expression>']))
            elif arguments['revoke']:
                response = revoke_user.run(RevokeUserRequest(user_id=user_id))
            elif arguments['list']:
                response = list_users.run(ListUsersRequest())
        if arguments['upload']:
            response = upload_file.run(UploadFileRequest(arguments['<source_url>']))
        if arguments['download']:
            response = download_file.run(DownloadFileRequest(user_id=arguments['--email-address'],
                                                             request_url=arguments['<url>']))
        if arguments['encrypt']:
            response = encrypt_file.run(
                EncryptFileRequest(input_file=arguments['<file>'], policy_expression=arguments['<policy_expression>'],
                                   output_file=None))

        print(response)
    except Exception as err:
        print(err)
