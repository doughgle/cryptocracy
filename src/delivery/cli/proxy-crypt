#!/usr/bin/env python
"""
Usage: proxy-crypt user add <email_address> <user_public_key> <attribute_expression>
       proxy-crypt user list
       proxy-crypt user revoke <email_address>
       proxy-crypt (encrypt|decrypt) <file>
       proxy-crypt (upload|download) <file>

Options:
  -h --help     Show this screen.
  --version     Show version.

"""
from src.use_cases.list_users import ListUsersUseCase, ListUsersRequest

__version__ = 'Proxy Crypt 1.0'

from docopt import docopt

from src.boundaries.proxy_key_store import AwsProxyKeyStore
from src.model.proxy_key_generator import ProxyKeyGenerator
from src.use_cases.add_user import AddUserUseCase, AddUserRequest
from src.use_cases.revoke_user import RevokeUserUseCase, RevokeUserRequest


def init_use_cases():
    global add_user, revoke_user, list_users
    table_name = 'proxy-key-table'
    proxy_key_store = AwsProxyKeyStore(table_name)
    add_user = AddUserUseCase(ProxyKeyGenerator(master_secret_key=123456),
                              proxy_key_store)
    revoke_user = RevokeUserUseCase(proxy_key_store)
    list_users = ListUsersUseCase(proxy_key_store)


if __name__ == '__main__':
    init_use_cases()

    arguments = docopt(__doc__, version=__version__)
    user_id = arguments['<email_address>']
    if arguments['user']:
        if arguments['add']:
            response = add_user.run(AddUserRequest(user_id=user_id,
                                                   user_public_key=arguments['<user_public_key>'],
                                                   attributes=arguments['<attribute_expression>']))
        elif arguments['revoke']:
            response = revoke_user.run(RevokeUserRequest(user_id=user_id))
        elif arguments['list']:
            response = list_users.run(ListUsersRequest())

    print(response)
