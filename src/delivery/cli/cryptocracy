#!/usr/bin/env python
"""
Usage: cryptocracy setup [options]
       cryptocracy generate keypair [options]
       cryptocracy add user <email_address> <user_public_key> <attribute_expression> [options]
       cryptocracy list (user|file) [options]
       cryptocracy revoke user <email_address> [options]
       cryptocracy encrypt <file> <policy_expression> [options]
       cryptocracy decrypt <file> [options]
       cryptocracy upload <source_url> [<dest_key>] [options]
       cryptocracy download <url> <user_id> [options]

Options:
  --cryptocracy-config=FILE      Path to the config file to use for CLI commands. [default: $HOME/.cryptocracy]
  --email-address=ADDRESS        Identity of the caller for upload download commands.
  -v, --verbose                  Show debug information.
  -h --help                      Show this screen.
  --version                      Show version.

"""
import os
import traceback

from src.boundaries.object_store import AwsObjectStore
from src.model.abe_scheme import CharmHybridABE
from src.model.result import RESULT
from src.use_cases.download_file import DownloadFileUseCase, DownloadFileRequest
from src.use_cases.encrypt_file import EncryptFileUseCase, EncryptFileRequest
from src.use_cases.generate_key_pair import GenerateKeyPairUseCase, GenerateKeyPairRequest
from src.use_cases.list_users import ListUsersUseCase, ListUsersRequest
from src.use_cases.setup import SetupUseCase, SetupRequest
from src.use_cases.upload_file import UploadFileUseCase, UploadFileRequest

__version__ = 'Proxy Crypt 1.0'

from docopt import docopt

from src.boundaries.proxy_key_store import AwsProxyKeyStore
from src.use_cases.add_user import AddUserUseCase, AddUserRequest
from src.use_cases.revoke_user import RevokeUserUseCase, RevokeUserRequest


def main():
    try:
        init_use_cases()

        arguments = docopt(__doc__, version=__version__)
        if arguments['--verbose']:
            print(arguments)
        user_id = arguments['<email_address>']
        response = "Coming soon..!"
        if arguments['setup']:
            response = setup.run(SetupRequest())
            save_setup(response)
        if arguments['generate']:
            if arguments['keypair']:
                response = generate_key_pair.run(GenerateKeyPairRequest())
        if arguments['user']:
            if arguments['add']:
                response = add_user.run(AddUserRequest(user_id=user_id,
                                                       user_public_key=arguments['<user_public_key>'],
                                                       attributes=arguments['<attribute_expression>']))
            elif arguments['revoke']:
                response = revoke_user.run(RevokeUserRequest(user_id=user_id))
            elif arguments['list']:
                response = list_users.run(ListUsersRequest())
        if arguments['upload']:
            response = upload_file.run(UploadFileRequest(arguments['<source_url>']))
        if arguments['download']:
            response = download_file.run(DownloadFileRequest(user_id=arguments['--email-address'],
                                                             request_url=arguments['<url>']))
        if arguments['encrypt']:
            response = encrypt_file.run(
                EncryptFileRequest(input_file=arguments['<file>'], policy_expression=arguments['<policy_expression>'],
                                   output_file=None))

        print(response)
    except Exception as err:
        print(err)
        traceback.print_tb(err.__traceback__)


def init_use_cases():
    global setup, generate_key_pair, add_user, revoke_user, list_users, download_file, encrypt_file, upload_file
    proxy_key_store = AwsProxyKeyStore(os.getenv('CRYPTOCRACY_PROXY_KEY_STORE_TABLE_NAME'))
    abe_scheme = CharmHybridABE()
    setup = SetupUseCase(abe_scheme)
    generate_key_pair = GenerateKeyPairUseCase(abe_scheme)
    add_user = AddUserUseCase(abe_scheme, proxy_key_store)
    revoke_user = RevokeUserUseCase(proxy_key_store)
    list_users = ListUsersUseCase(proxy_key_store)

    object_store = AwsObjectStore(os.getenv('CRYPTOCRACY_OBJECT_STORE_BUCKET_NAME'))
    object_cache = AwsObjectStore(os.getenv('CRYPTOCRACY_OBJECT_CACHE_BUCKET_NAME'))
    upload_file = UploadFileUseCase(object_store)
    download_file = DownloadFileUseCase(proxy_key_store, None, object_store, object_cache, abe_scheme=abe_scheme)

    encrypt_file = EncryptFileUseCase(abe_scheme)


def save_setup(response):
    if response['result'] == RESULT.SUCCESS:
        home = os.path.expanduser("~")
        cryptocracy_home = os.path.join(home, '.cryptocracy')
        os.makedirs(cryptocracy_home, mode=0o700, exist_ok=True)
        with open(os.open(os.path.join(cryptocracy_home, 'msk'), os.O_CREAT | os.O_WRONLY, 0o600), 'wb') as f:
            f.write(response['msk'])
        with open(os.open(os.path.join(cryptocracy_home, 'params'), os.O_CREAT | os.O_WRONLY, 0o644), 'wb') as f:
            f.write(response['params'])


if __name__ == '__main__':
    main()
